#+TITLE: Emacs configuration

#+STARTUP: overview

* package
We use emacs-china.org elpa for GFW. Thanks to zilongshanren
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "http://elpa.emacs-china.org/gnu/")
               ("melpa" . "http://elpa.emacs-china.org/melpa/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-always-ensure t)
#+END_SRC

* Evil
#+BEGIN_SRC emacs-lisp
  ;; (use-package evil
  ;;   :init
  ;;   (progn
  ;;     (use-package evil-leader
  ;;       :init
  ;;       (global-evil-leader-mode)
  ;;       :config
  ;;       (progn
  ;; 	(setq evil-leader/in-all-states t)))
  ;;     (evil-mo
;;       de 1)))
#+END_SRC
* window manage
#+BEGIN_SRC emacs-lisp
  (use-package zygospore
    :bind (("C-x 1" . zygospore-toggle-delete-other-windows)
           ("RET" . newline-and-indent)))
#+END_SRC
* zh and font
- Chinese-pyim
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(setq default-input-method "chinese-pyim")
(require 'init-chinese-pyim)
;;(setq pyim-page-tooltip nil)
#+END_SRC
- fonts
 + All available fonts to emacs: =(print (font-family-list))=
 + describe fonts: =(M-x describe-font)=
 + execute cmd in emacs: cfs-edit-profile cfs-increase-fontsize cfs-decrease-fontsize
 + Switch: cfs-switch-profile cfs-next-profile
 + exec describe-char to get font information of current cursor
 + Visit [[https://github.com/tumashu/chinese-fonts-setup][Github-chinese-font-setup]] for more information
#+BEGIN_SRC emacs-lisp
  (use-package chinese-fonts-setup
    :if (display-graphic-p)
    :config
    (progn
      (chinese-fonts-setup-enable)
      (setq cfs-use-face-font-rescale t)
      ;; (setq face-font-rescale-alist '(("Microsoft Yahei" . 1.2) ("WenQuanYi Zen Hei" . 1.2)))
      ))
#+END_SRC

* org
#+BEGIN_SRC emacs-lisp
  (setq org-support-shift-select t)
  (setq org-src-fontify-natively t)
  ;; (setq org-src-tab-acts-natively t)
  (if (string-equal system-type "windows-nt")
      (setq org-directory "~/private/misc/org")
    (setq org-directory "~/org"))
  (setq org-agenda-files (list org-directory))
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (setq default-directory (concat org-directory "/"))
#+END_SRC

* basic
** startup
#+BEGIN_SRC emacs-lisp
  (setq-default inhibit-splash-screen t)
  (global-set-key (kbd "C-h /") (lambda() (interactive) (display-splash-screen)))
  (when (display-graphic-p)
    (scroll-bar-mode -1)
    ;;(setq initial-frame-alist (quote ((fullscreen . maximized))))
  )
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
#+END_SRC

** bar and theme
- hide menu-bar and tool-bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(if (display-graphic-p)
  (load-theme 'monokai t)
  (load-theme 'monokai t))
(set-face-attribute 'region nil :background "#ae81ff")
#+END_SRC

** backup and behavior
#+BEGIN_SRC emacs-lisp
(setq-default make-backup-files nil)
(setq-default cursor-type 'bar)
(delete-selection-mode t)
#+END_SRC

** customize file
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

** disable mouse
#+BEGIN_SRC emacs-lisp
(use-package disable-mouse
  :ensure t
  :defer t
  :init (global-disable-mouse-mode)
  :diminish global-disable-mouse-mode
)
#+END_SRC

** coding
- Show english date: ENU
#+BEGIN_SRC emacs-lisp
  (set-locale-environment "ENU")
  (prefer-coding-system 'utf-8-unix)
  (set-default buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (set-default locale-coding-system 'utf-8-unix)
#+END_SRC

* ivy
Refer [[http://oremacs.com/swiper/][Ivy User Manual]]
An interface for interactive completion.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      )
    :diminish ivy-mode
  )
#+END_SRC

* auto completion
- Candidates package: company, auto-complete
- Here use company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
     (progn
      ;; Use Company for completion
      (bind-key [remap completion-at-point] #'company-complete company-mode-map)
      (setq company-tooltip-align-annotations t
	    ;; Easy navigation to candidates with M-<n>
	    company-show-numbers t)
      (setq company-dabbrev-downcase nil)
      (setq company-minimum-prefix-length 2)
      (setq company-idle-delay 0.4)

      (defun text-mode-hook-setup ()
	(make-local-variable 'company-backends)
	(add-to-list 'company-backends 'company-ispell)
	(setq company-ispell-dictionary (expand-file-name "~/.emacs.d/misc/english-words.txt")))
      (add-hook 'text-mode-hook 'text-mode-hook-setup)
      (defun toggle-company-ispell ()
	(interactive)
	(cond
	 ((memq 'company-ispell company-backends)
	  (setq company-backends (delete 'company-ispell company-backends))
	  (message "company-ispell disabled"))
	 (t
	  (add-to-list 'company-backends 'company-ispell)
	  (message "company-ispell enabled!")))))
    :diminish company-mode)

  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (progn
      (require 'smartparens-config)
      (smartparens-global-mode 1)))
#+END_SRC

* c developer
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
        (lambda() (setq show-trailing-whitespace 1)))
  (setq-default
   indent-tabs-mode nil
   tab-width 4)

  (use-package projectile
    :init
    (projectile-global-mode)
    (setq projectile-enable-caching t))

  ;;(setq whitespace-display-mappings '((space-mark 32 [183] [65])))
  ;;(setq whitespace-style '(space-mark))
  (setq whitespace-display-mappings '((space-mark 32 [?Â·])))
  ;;(setq whitespace-style '(space-mark))
  (setq whitespace-style '(face trailing spaces space-mark))
  (whitespace-mode)

  (use-package helm
    :init
    (progn
      (require 'helm-config)
      (require 'helm-grep)
      ;; To fix error at compile:
      ;; Error (bytecomp): Forgot to expand macro with-helm-buffer in
      ;; (with-helm-buffer helm-echo-input-in-header-line)
      (if (version< "26.0.50" emacs-version)
          (eval-when-compile (require 'helm-lib)))

      (defun helm-hide-minibuffer-maybe ()
        (when (with-helm-buffer helm-echo-input-in-header-line)
          (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
            (overlay-put ov 'window (selected-window))
            (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
                                    `(:background ,bg-color :foreground ,bg-color)))
            (setq-local cursor-type nil))))

      (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
      ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
      ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
      ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
      (global-set-key (kbd "C-c h") 'helm-command-prefix)
      (global-unset-key (kbd "C-x c"))

      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
      (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
      (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

      (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
      (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
      (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)

      (when (executable-find "curl")
        (setq helm-google-suggest-use-curl-p t))

      (setq helm-google-suggest-use-curl-p t
            helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
            ;; helm-quick-update t ; do not display invisible candidates
            helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.

            ;; you can customize helm-do-grep to execute ack-grep
            ;; helm-grep-default-command "ack-grep -Hn --smart-case --no-group --no-color %e %p %f"
            ;; helm-grep-default-recurse-command "ack-grep -H --smart-case --no-group --no-color %e %p %f"
            helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window

            helm-echo-input-in-header-line t

            ;; helm-candidate-number-limit 500 ; limit the number of displayed canidates
            helm-ff-file-name-history-use-recentf t
            helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source.
            helm-buffer-skip-remote-checking t

            helm-mode-fuzzy-match t

            helm-buffers-fuzzy-matching t ; fuzzy matching buffer names when non-nil
                                          ; useful in helm-mini that lists buffers
            helm-org-headings-fontify t
            ;; helm-find-files-sort-directories t
            ;; ido-use-virtual-buffers t
            helm-semantic-fuzzy-match t
            helm-M-x-fuzzy-match t
            helm-imenu-fuzzy-match t
            helm-lisp-fuzzy-completion t
            ;; helm-apropos-fuzzy-match t
            helm-buffer-skip-remote-checking t
            helm-locate-fuzzy-match t
            helm-display-header-line nil)

      (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

      (global-set-key (kbd "M-x") 'helm-M-x)
      (global-set-key (kbd "M-y") 'helm-show-kill-ring)
      (global-set-key (kbd "C-x b") 'helm-buffers-list)
      (global-set-key (kbd "C-x C-f") 'helm-find-files)
      (global-set-key (kbd "C-c r") 'helm-recentf)
      (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
      (global-set-key (kbd "C-c h o") 'helm-occur)
      (global-set-key (kbd "C-c h o") 'helm-occur)

      (global-set-key (kbd "C-c h w") 'helm-wikipedia-suggest)
      (global-set-key (kbd "C-c h g") 'helm-google-suggest)

      (global-set-key (kbd "C-c h x") 'helm-register)
      ;; (global-set-key (kbd "C-x r j") 'jump-to-register)

      (define-key 'help-command (kbd "C-f") 'helm-apropos)
      (define-key 'help-command (kbd "r") 'helm-info-emacs)
      (define-key 'help-command (kbd "C-l") 'helm-locate-library)

      ;; use helm to list eshell history
      (add-hook 'eshell-mode-hook
                #'(lambda ()
                    (define-key eshell-mode-map (kbd "M-l")  'helm-eshell-history)))

  ;;; Save current position to mark ring
      (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)

      ;; show minibuffer history with Helm
      (define-key minibuffer-local-map (kbd "M-p") 'helm-minibuffer-history)
      (define-key minibuffer-local-map (kbd "M-n") 'helm-minibuffer-history)

      (define-key global-map [remap find-tag] 'helm-etags-select)

      (define-key global-map [remap list-buffers] 'helm-buffers-list)

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; PACKAGE: helm-swoop                ;;
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Locate the helm-swoop folder to your path
      (use-package helm-swoop
        :bind (("C-c h o" . helm-swoop)
               ("C-c s" . helm-multi-swoop-all))
        :config
        ;; When doing isearch, hand the word over to helm-swoop
        (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)

        ;; From helm-swoop to helm-multi-swoop-all
        (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)

        ;; Save buffer when helm-multi-swoop-edit complete
        (setq helm-multi-swoop-edit-save t)

        ;; If this value is t, split window inside the current window
        (setq helm-swoop-split-with-multiple-windows t)

        ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
        (setq helm-swoop-split-direction 'split-window-vertically)

        ;; If nil, you can slightly boost invoke speed in exchange for text color
        (setq helm-swoop-speed-or-color t))

      (helm-mode 1)

      (use-package helm-projectile
        :init
        (helm-projectile-on)
        (setq projectile-completion-system 'helm)
        (setq projectile-indexing-method 'alien))))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  ;; this variables must be set before load helm-gtags
  ;; you can change to any prefix key of your choice
  (setq helm-gtags-prefix-key "\C-cg")

  (use-package helm-gtags
    :init
    (progn
      (setq helm-gtags-ignore-case t
            helm-gtags-auto-update t
            helm-gtags-use-input-at-cursor t
            helm-gtags-pulse-at-cursor t
            helm-gtags-prefix-key "\C-cg"
            helm-gtags-suggested-key-mapping t)

      ;; Enable helm-gtags-mode in Dired so you can jump to any tag
      ;; when navigate project tree with Dired
      (add-hook 'dired-mode-hook 'helm-gtags-mode)

      ;; Enable helm-gtags-mode in Eshell for the same reason as above
      (add-hook 'eshell-mode-hook 'helm-gtags-mode)

      ;; Enable helm-gtags-mode in languages that GNU Global supports
      (add-hook 'c-mode-hook 'helm-gtags-mode)
      (add-hook 'c++-mode-hook 'helm-gtags-mode)
      (add-hook 'java-mode-hook 'helm-gtags-mode)
      (add-hook 'asm-mode-hook 'helm-gtags-mode)

      ;; key bindings
      (with-eval-after-load 'helm-gtags
        (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
        (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
        (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
        (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
        (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
        (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; company-c-headers
  (use-package company-c-headers)
   ;; :init
   ;; (add-to-list 'company-backends 'company-c-headers))

  ;; hs-minor-mode for folding source code
  (add-hook 'c-mode-common-hook 'hs-minor-mode)

  ;; Available C style:
  ;; âgnuâ: The default style for GNU projects
  ;; âk&râ: What Kernighan and Ritchie, the authors of C used in their book
  ;; âbsdâ: What BSD developers use, aka âAllman styleâ after Eric Allman.
  ;; âwhitesmithâ: Popularized by the examples that came with Whitesmiths C, an early commercial C compiler.
  ;; âstroustrupâ: What Stroustrup, the author of C++ used in his book
  ;; âellemtelâ: Popular C++ coding standards as defined by âProgramming in C++, Rules and Recommendations,â Erik Nyquist and Mats Henricson, Ellemtel
  ;; âlinuxâ: What the Linux developers use for kernel development
  ;; âpythonâ: What Python developers use for extension modules
  ;; âjavaâ: The default style for java-mode (see below)
  ;; âuserâ: When you want to define your own style
  (setq c-default-style "linux") ;; set style to "linux"

  (use-package cc-mode)

  (require 'cc-mode)
  (require 'semantic)

  (global-semanticdb-minor-mode 1)
  (global-semantic-idle-scheduler-mode 1)
  (global-semantic-stickyfunc-mode 1)

  (semantic-mode 1)

  (defun alexott/cedet-hook ()
    (local-set-key "\C-c\C-j" 'semantic-ia-fast-jump)
    (local-set-key "\C-c\C-s" 'semantic-ia-show-summary)
    (local-set-key "\C-c\C-k" 'semantic-ia-complete-tip))

  (add-hook 'c-mode-common-hook 'alexott/cedet-hook)
  (add-hook 'c-mode-hook 'alexott/cedet-hook)
  (add-hook 'c++-mode-hook 'alexott/cedet-hook)

  ;; Enable EDE only in C/C++
  (require 'ede)
  (global-ede-mode)
#+END_SRC

editing:
#+BEGIN_SRC emacs-lisp
  ;; GROUP: Editing -> Editing Basics
  (setq global-mark-ring-max 5000         ; increase mark ring to contains 5000 entries
        mark-ring-max 5000                ; increase kill ring to contains 5000 entries
        mode-require-final-newline t      ; add a newline to end of file
        tab-width 4                       ; default to 4 visible spaces to display a tab
        )

  (add-hook 'sh-mode-hook (lambda ()
                            (setq tab-width 4)))

  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)

  (setq-default indent-tabs-mode nil)
  (delete-selection-mode)
  (global-set-key (kbd "RET") 'newline-and-indent)

  ;; GROUP: Editing -> Killing
  (setq kill-ring-max 5000 ; increase kill-ring capacity
        kill-whole-line t  ; if NIL, kill whole line and move the next line up
        )

  ;; show whitespace in diff-mode
  (add-hook 'diff-mode-hook (lambda ()
                              (setq-local whitespace-style
                                          '(face
                                            tabs
                                            tab-mark
                                            spaces
                                            space-mark
                                            trailing
                                            indentation::space
                                            indentation::tab
                                            newline
                                            newline-mark))
                              (whitespace-mode 1)))

  ;; Package: volatile-highlights
  ;; GROUP: Editing -> Volatile Highlights
  (use-package volatile-highlights
    :init
    (volatile-highlights-mode t))

  ;; Package: undo-tree
  ;; GROUP: Editing -> Undo -> Undo Tree
  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))


  ;; Package: yasnippet
  ;; GROUP: Editing -> Yasnippet
  ;; Package: yasnippet
  (use-package yasnippet
    :defer t
    :init
    (add-hook 'prog-mode-hook 'yas-minor-mode))

  ;; Package: clean-aindent-mode
  (use-package clean-aindent-mode
    :init
    (add-hook 'prog-mode-hook 'clean-aindent-mode))

  ;; Package: dtrt-indent
  (use-package dtrt-indent
    :init
    (dtrt-indent-mode 1)
    (setq dtrt-indent-verbosity 0))

  ;; Package: ws-butler
  (use-package ws-butler
    :init
    (add-hook 'prog-mode-hook 'ws-butler-mode)
    (add-hook 'text-mode 'ws-butler-mode)
    (add-hook 'fundamental-mode 'ws-butler-mode))

  ;; PACKAGE: comment-dwim-2
  (global-set-key (kbd "M-;") 'comment-dwim-2)

  ;; PACKAGE: anzu
  ;; GROUP: Editing -> Matching -> Isearch -> Anzu
  (use-package anzu
    :init
    (global-anzu-mode)
    (global-set-key (kbd "M-%") 'anzu-query-replace)
    (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp))

  ;; PACKAGE: iedit
  (use-package iedit
    :bind (("C-;" . iedit-mode))
    :init
    (setq iedit-toggle-key-default nil))

  ;; Customized functions
  (defun prelude-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first. If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  (global-set-key (kbd "C-a") 'prelude-move-beginning-of-line)

  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single
  line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position)
             (line-beginning-position 2)))))

  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single
    line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))

  ;; kill a line, including whitespace characters until next non-whiepsace character
  ;; of next line
  (defadvice kill-line (before check-position activate)
    (if (member major-mode
                '(emacs-lisp-mode scheme-mode lisp-mode
                                  c-mode c++-mode objc-mode
                                  latex-mode plain-tex-mode))
        (if (and (eolp) (not (bolp)))
            (progn (forward-char 1)
                   (just-one-space 0)
                   (backward-char 1)))))

  ;; taken from prelude-editor.el
  ;; automatically indenting yanked text if in programming-modes
  (defvar yank-indent-modes
    '(LaTeX-mode TeX-mode)
    "Modes in which to indent regions that are yanked (or yank-popped).
  Only modes that don't derive from `prog-mode' should be listed here.")

  (defvar yank-indent-blacklisted-modes
    '(python-mode slim-mode haml-mode)
    "Modes for which auto-indenting is suppressed.")

  (defvar yank-advised-indent-threshold 1000
    "Threshold (# chars) over which indentation does not automatically occur.")

  (defun yank-advised-indent-function (beg end)
    "Do indentation, as long as the region isn't too large."
    (if (<= (- end beg) yank-advised-indent-threshold)
        (indent-region beg end nil)))

  (defadvice yank (after yank-indent activate)
    "If current mode is one of 'yank-indent-modes,
  indent yanked text (with prefix arg don't indent)."
    (if (and (not (ad-get-arg 0))
             (not (member major-mode yank-indent-blacklisted-modes))
             (or (derived-mode-p 'prog-mode)
                 (member major-mode yank-indent-modes)))
        (let ((transient-mark-mode nil))
          (yank-advised-indent-function (region-beginning) (region-end)))))

  (defadvice yank-pop (after yank-pop-indent activate)
    "If current mode is one of `yank-indent-modes',
  indent yanked text (with prefix arg don't indent)."
    (when (and (not (ad-get-arg 0))
               (not (member major-mode yank-indent-blacklisted-modes))
               (or (derived-mode-p 'prog-mode)
                   (member major-mode yank-indent-modes)))
      (let ((transient-mark-mode nil))
        (yank-advised-indent-function (region-beginning) (region-end)))))

  ;; prelude-core.el
  (defun indent-buffer ()
    "Indent the currently visited buffer."
    (interactive)
    (indent-region (point-min) (point-max)))

  ;; prelude-editing.el
  (defcustom prelude-indent-sensitive-modes
    '(coffee-mode python-mode slim-mode haml-mode yaml-mode)
    "Modes for which auto-indenting is suppressed."
    :type 'list)

  (defun indent-region-or-buffer ()
    "Indent a region if selected, otherwise the whole buffer."
    (interactive)
    (unless (member major-mode prelude-indent-sensitive-modes)
      (save-excursion
        (if (region-active-p)
            (progn
              (indent-region (region-beginning) (region-end))
              (message "Indented selected region."))
          (progn
            (indent-buffer)
            (message "Indented buffer.")))
        (whitespace-cleanup))))

  (global-set-key (kbd "C-c i") 'indent-region-or-buffer)

  ;; add duplicate line function from Prelude
  ;; taken from prelude-core.el
  (defun prelude-get-positions-of-line-or-region ()
    "Return positions (beg . end) of the current line
  or region."
    (let (beg end)
      (if (and mark-active (> (point) (mark)))
          (exchange-point-and-mark))
      (setq beg (line-beginning-position))
      (if mark-active
          (exchange-point-and-mark))
      (setq end (line-end-position))
      (cons beg end)))

  ;; smart openline
  (defun prelude-smart-open-line (arg)
    "Insert an empty line after the current line.
  Position the cursor at its beginning, according to the current mode.
  With a prefix ARG open line above the current line."
    (interactive "P")
    (if arg
        (prelude-smart-open-line-above)
      (progn
        (move-end-of-line nil)
        (newline-and-indent))))

  (defun prelude-smart-open-line-above ()
    "Insert an empty line above the current line.
  Position the cursor at it's beginning, according to the current mode."
    (interactive)
    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))

  (global-set-key (kbd "M-o") 'prelude-smart-open-line)
  (global-set-key (kbd "M-o") 'open-line)
#+END_SRC

*** function-args
#+BEGIN_SRC emacs-lisp
  (use-package function-args
    :config
    (fa-config-default))
#+END_SRC

* Finish
#+BEGIN_SRC emacs-lisp
(message "")
#+END_SRC

* introduce
** use-package
*** keywords
- init: execute code before a package is loaded
- config: execute code after a package is loaded
- commands: creates autoloads and defer loading the modules
- diminish: hides useless information, see diminish utility
*** Refer
[[https://github.com/jwiegley/use-package][Github for use-package]]
